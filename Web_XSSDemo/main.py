from flask import Flask, request, render_template, redirect, session, make_response

app = Flask(__name__)
app.secret_key = "super secret key"
# Base64-encoded image (a simple red square for demo)

BASE64_IMAGE = (
    "data:image/png;base64,"
    ""
)


# In-memory comments store (not for production use)
comments = []

@app.route("/", methods=["GET", "POST"])
def index():
    global comments

    if request.method == "POST":
        # Insecurely add the user input to the comments (XSS vulnerability)
        new_comment = request.form.get("comment", "")
        comments.append(new_comment)
        return redirect("http://127.0.0.1:5000", code=302)

    resp = make_response(render_template("index.html", comments=comments, base64_image=BASE64_IMAGE))
    resp.set_cookie('somecookiename', 'I am cookie')
    session["USER_SESSION_COOKIE"] = "Numsefisken"
    return resp


if __name__ == "__main__":
    app.run(debug=True, port=5000)
